# cmake_minimum_required(VERSION 3.2)
# project(TArmProject)


option(USE_OPENMP "Use OPENMP" ON)
option(USE_LAPACK "Use LAPACK library" ON)

set(GPU_TARGETS "gfx906" CACHE STRING "GPU targets to compile for")
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake-modules")
list(APPEND CMAKE_MODULE_PATH "/opt/rocm/hip/cmake")
list(APPEND CMAKE_PREFIX_PATH /opt/rocm/hip/opt/rocm)
set(CMAKE_CXX_FLAGS "-std=c++11   ${CMAKE_CXX_FLAGS}")

# 某些无法识别
 SET(CMAKE_C_COMPILER "/opt/rh/devtoolset-7/root/usr/bin/gcc")
 SET(CMAKE_CXX_COMPILER "/opt/rh/devtoolset-7/root/usr/bin/g++")
#SET(CMAKE_C_COMPILER "/opt/rocm/hip/bin/hipcc")
#SET(CMAKE_CXX_COMPILER "/opt/rocm/hip/bin/hipcc")
SET(HIPCC "/opt/rh/devtoolset-7/root/usr/bin/g++")

option(USE_HIP "Use ROCM" ON)

if(USE_HIP)
    find_package(HIP REQUIRED)
	#find_package(hipsparse REQUIRED)
    add_definitions(-DTARM_USE_HIP)
	#连接需要的库的路径
	#link_libraries(${CUDA_cusparse_LIBRARY})
    #link_libraries(${CUDA_cusolver_LIBRARY})
    #link_libraries(${hipsparse_LIBRARY})
	#message("link hipsparse")	
	if(DEFINED DEBUG)
        set(CMAKE_HIPCC_FLAGS "${CMAKE_HIPCC_FLAGS} -O0 -g --amdgpu-target=gfx906 -fgpu-rdc--amdgpu-target=gfx906  -fno-gpu-rdc --std=C++11 -D_HIP_PLATFORM_HCC__")
        set(CMAKE_HCC_FLAGS "${CMAKE_HCC_FLAGS} -O0 -g --amdgpu-target=gfx906 -fgpu-rdc--amdgpu-target=gfx906  -fno-gpu-rdc --std=C++11 -D_HIP_PLATFORM_HCC__")
    else()
        set(CMAKE_HIPCC_FLAGS "${CMAKE_HIPCC_FLAGS} -O3 --amdgpu-target=gfx906 -fgpu-rdc--amdgpu-target=gfx906  -fno-gpu-rdc --std=C++11 -D_HIP_PLATFORM_HCC__")
        set(CMAKE_HCC_FLAGS "${CMAKE_HCC_FLAGS} -O3 --amdgpu-target=gfx906 -fgpu-rdc--amdgpu-target=gfx906  -fno-gpu-rdc --std=C++11 -D_HIP_PLATFORM_HCC__")
    endif()
endif()


# set(LAPACKE_DIR "")
if(USE_LAPACKE)
    add_definitions(-DTARM_USE_LAPACKE)
    include_directories("../include")
endif()

if(USE_OPENMP)
    add_definitions(-DTARM_USE_OPENMP)
    if(USE_ICC)
        if(DEFINED DEBUG)
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99 -Wall -Wextra -Wno-maybe-uninitialized -Wno-unused-variable -lrt -qopenmp -O0 -g -DADD_")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-maybe-uninitialized -lrt -qopenmp -O0 -g -DADD_")
        else()
            if(USE_KNL)
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mmic -std=gnu99 -Wall -Wextra -Wno-maybe-uninitialized -Wno-unused-variable -lrt -qopenmp -O3 -DADD_")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmic -Wall -Wextra -Wno-maybe-uninitialized -lrt -qopenmp -O3 -DADD_")
            else()
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99 -Wall -Wextra -Wno-maybe-uninitialized -Wno-unused-variable -lrt -qopenmp -O3 -DADD_")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-maybe-uninitialized -lrt -qopenmp -O3 -DADD_")
            endif()
        endif()
    else()
        if(DEFINED DEBUG)
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GNU_SOURCE -Wall -Wextra -Wno-maybe-uninitialized -Wno-unused-variable -lrt -fopenmp -O0 -g -DADD_")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-maybe-uninitialized -fopenmp -O0 -g -DADD_")
        else()
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GNU_SOURCE -Wall -Wextra -Wno-maybe-uninitialized -Wno-unused-variable -lrt -fopenmp -O3 -DADD_")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-maybe-uninitialized -lrt -fopenmp -O3 -DADD_")
        endif()
    endif()
else()
    if(DEFINED DEBUG)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GNU_SOURCE -Wall -Wextra -Wno-maybe-uninitialized -Wno-unused-variable -lrt -O0 -g -DADD_")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-maybe-uninitialized -lrt -O0 -g -DADD_")
    else()
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GNU_SOURCE -Wall -Wextra -Wno-maybe-uninitialized -Wno-unused-variable -lrt -O3 -DADD_")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-maybe-uninitialized -lrt -O3 -DADD_")
    endif()
endif()


# 添加头文件的查找目录
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)
LINK_DIRECTORIES(/public/home/ghfund_1_a6/armtensor/build/)

file(GLOB_RECURSE TEST_SRCS RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "*.c" "*.cu")

foreach(TEST_SRC IN LISTS TEST_SRCS)
    get_filename_component(TEST_EXE "${TEST_SRC}" NAME_WE)
    LINK_DIRECTORIES("${PROJECT_SOURCE_DIR}/build")
    if(USE_HIP)
       HIP_ADD_EXECUTABLE("${TEST_EXE}" "${TEST_SRC}" HCC_OPTIONS ${HCC_OPTIONS} NVCC_OPTIONS ${NVCC_OPTIONS})
    else()
       add_executable("${TEST_EXE}" "${TEST_SRC}" ${BACKWARD_ENABLE})
    endif()
    #add_executable("${TEST_EXE}" "${TEST_SRC}" ${BACKWARD_ENABLE})
    set_target_properties("${TEST_EXE}" PROPERTIES C_STANDARD 99)
    set_target_properties("${TEST_EXE}" PROPERTIES CXX_STANDARD 11)

    target_link_libraries("${TEST_EXE}" "/public/home/ghfund_1_a6/armtensor/build/libTArm.so" "/usr/lib64/liblapacke.so.3" "/usr/lib64/liblapack.so.3")
    add_test(NAME "${TEST_EXE}" COMMAND "${TEST_EXE}")
    # add_test("${TEST_EXE}")
endforeach(TEST_SRC)
