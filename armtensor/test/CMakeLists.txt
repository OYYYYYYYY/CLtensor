# cmake_minimum_required(VERSION 3.2)
# project(TArmProject)


option(USE_OPENMP "Use OPENMP" ON)
option(USE_LAPACK "Use LAPACK library" ON)

# set(LAPACKE_DIR "")
if(USE_LAPACKE)
    add_definitions(-DTARM_USE_LAPACKE)
    include_directories("../include")
endif()

if(USE_OPENMP)
    add_definitions(-DTARM_USE_OPENMP)
    if(USE_ICC)
        if(DEFINED DEBUG)
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99 -Wall -Wextra -Wno-maybe-uninitialized -Wno-unused-variable -lrt -qopenmp -O0 -g -DADD_")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-maybe-uninitialized -lrt -qopenmp -O0 -g -DADD_")
        else()
            if(USE_KNL)
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mmic -std=gnu99 -Wall -Wextra -Wno-maybe-uninitialized -Wno-unused-variable -lrt -qopenmp -O3 -DADD_")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmic -Wall -Wextra -Wno-maybe-uninitialized -lrt -qopenmp -O3 -DADD_")
            else()
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99 -Wall -Wextra -Wno-maybe-uninitialized -Wno-unused-variable -lrt -qopenmp -O3 -DADD_")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-maybe-uninitialized -lrt -qopenmp -O3 -DADD_")
            endif()
        endif()
    else()
        if(DEFINED DEBUG)
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GNU_SOURCE -Wall -Wextra -Wno-maybe-uninitialized -Wno-unused-variable -lrt -fopenmp -O0 -g -DADD_")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-maybe-uninitialized -fopenmp -O0 -g -DADD_")
        else()
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GNU_SOURCE -Wall -Wextra -Wno-maybe-uninitialized -Wno-unused-variable -lrt -fopenmp -O3 -DADD_")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-maybe-uninitialized -lrt -fopenmp -O3 -DADD_")
        endif()
    endif()
else()
    if(DEFINED DEBUG)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GNU_SOURCE -Wall -Wextra -Wno-maybe-uninitialized -Wno-unused-variable -lrt -O0 -g -DADD_")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-maybe-uninitialized -lrt -O0 -g -DADD_")
    else()
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GNU_SOURCE -Wall -Wextra -Wno-maybe-uninitialized -Wno-unused-variable -lrt -O3 -DADD_")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-maybe-uninitialized -lrt -O3 -DADD_")
    endif()
endif()



# 添加头文件的查找目录
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)

file(GLOB_RECURSE TEST_SRCS RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "*.c")

foreach(TEST_SRC IN LISTS TEST_SRCS)
    get_filename_component(TEST_EXE "${TEST_SRC}" NAME_WE)
    LINK_DIRECTORIES("${PROJECT_SOURCE_DIR}/build")
    add_executable("${TEST_EXE}" "${TEST_SRC}" ${BACKWARD_ENABLE})
    set_target_properties("${TEST_EXE}" PROPERTIES C_STANDARD 99)
    set_target_properties("${TEST_EXE}" PROPERTIES CXX_STANDARD 11)
    # if(BUILD_STATIC)
    #     target_link_libraries("${TEST_EXE}" ParTI_s)
    # else()
    #     target_link_libraries("${TEST_EXE}" ParTI)
    # endif()
    # add_backward("${TEST_EXE}")
    target_link_libraries("${TEST_EXE}" "libTArm.so" "/usr/lib64/liblapacke.so.3" "/usr/lib64/liblapack.so.3" "/usr/lib/libblas.so.3")
    add_test(NAME "${TEST_EXE}" COMMAND "${TEST_EXE}")
    # add_test("${TEST_EXE}")
endforeach(TEST_SRC)
